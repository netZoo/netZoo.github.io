[
{
	"uri": "https://netZoo.github.io/contribute/",
	"title": "Contribution guide",
	"tags": [],
	"description": "",
	"content": "Contribution guide Contribute to the netZoo through the fork-branch model. "
},
{
	"uri": "https://netZoo.github.io/zooanimals/",
	"title": "Zoo animals",
	"tags": [],
	"description": "",
	"content": "Zoo animals A link to the zoo animals and their papers. "
},
{
	"uri": "https://netZoo.github.io/papers/",
	"title": "Papers",
	"tags": [],
	"description": "",
	"content": "Papers A list of publications that develop/reference the netZoo "
},
{
	"uri": "https://netZoo.github.io/docs/",
	"title": "Docs",
	"tags": [],
	"description": "",
	"content": "Documentation The full documentation and function definitions of the netZoo packages "
},
{
	"uri": "https://netZoo.github.io/contribute/contribute/",
	"title": "How to contribute",
	"tags": [],
	"description": "",
	"content": "Contribution guide The netZoo is an open-source software suite of network biology methods in R, Python, MATLAB, and C. Contributions to the netZoo can be in the form of 1) bug fixing, 2) performance improvment, and 3) new functions.\nEach language repository has a master and a devel branch. The master branch contains the stable code of the netZoo, and the devel branch contains the code with the new features that gets periodically merged into the master branch. New contributions of type 1) and 2) have to go through automatic tests before being integrated into the package. Contributions of type 3) have to be submitted with unit tests and tutorials to explain how the new function works.\nPreparing the contribution To increase the chances of including a contribution to netZoo, please follow the instructions below.\nNew functions New functions have to include a header that will server as documentation. Headers include a general description, description of inputs, ouputs, any notes, the authors list, the date, and a reference to the publication. Please follow this example.\nTo add a unit test, please include all the edge cases and the expected behavior of the function and ground truth dataset to test against. The tests should run ideally on several small examples to test several edge cases in a limited runtime. If a function is submitted in more than one language or if the function is a new implementation of a function that already exists in another language, there should be only one ground truth dataset across platform. This will ensure that the behavior of the function is the same across platforms. For example, if you're contirbuting a MATLAB implementation of PANDA, and there is an R implementation of PANDA, you should use the ground truth from netZooR for your test. Please check the tests folder of each repo for examples.\nPlease update your repo and make sure the tests pass locally before creating a PR. In R, please refer to the netZooR contribution guide. In Python, please run pytest in the root of netZooPy. In Matlab, you can run the tests in the tests folder manually.\n Bug fixes To fix a bug in a function, please create a new pull request with a description of the fix, and a new ground truth dataset if this relevant for the unit test.\nPerformance improvement To improve the speed/memory usage of a function, please create a new pull request with a description of the addition and its impact on memory/speed.\nPull requests to netZoo The contribution model follows the standard fork-branch model on the devel branch. Contributions are submitted as pull requests (PRs).\n  fork the netZoo repo to your github\n  clone the forked repo to your computer\ngit clone https://github.com/\u0026lt;your_github_name\u0026gt;/netZoo{R,Py,M,C}.git\n  access netZoo local folder cd netZoo{R,Py,M,C}\n  add a new remote typically called \u0026lsquo;upstream\u0026rsquo; that points to the source of netZoo\ngit remote add upstream https://github.com/netZoo/netZoo{R,Py,M,C}.git\n  switch to the devel branch, because your PR will target the devel branch\ngit checkout devel\n  create a new branch called new-feature off of the devel branch\ngit checkout -b new-feature\n  make the changes/additions to netZoo\n  add your changes\ngit add .\n  commit your changes\ngit commit -m 'commit message'\n  push your PR\ngit push origin new-feature\n  go the netZoo website https://github.com/netZoo/netZoo{R, Py, M, C}\n  create a pull request through the pop-up\n  make sure to change the target to devel branch not the master branch\n  the PR will go through automatic tests and it will be accepted by the moderators if it passes the tests\n  if the PR does not pass the test, further changes need to be made (step 8-10)\n  once the PR integrated in the devel branch, you can delete new-feature, switch back to devel branch and update it with the new branch through\ngit checkout devel\ngit fetch upstream\ngit merge upstream/devel\n  you can do the same for the master branch to update it .\n  Delete the merged feature branch both locally and remotely.\n "
},
{
	"uri": "https://netZoo.github.io/contribute/install/",
	"title": "How to install",
	"tags": [],
	"description": "",
	"content": "Installation guide To install netZoo{Py, M, C}, all you have to do is git clone https://github.com/netZoo/netZoo{Py,M,C}.git then to get the latest changes in your repository you need to git pull origin master.\nYou can work on the devel branch by git checkout devel. To update the devel branch type git pull origin devel.\nIn Python, an additional step is required to install netZooPy through pip3 install -e . in the either the root of devel or master branch and after each change to the source code.\nIn R, the installation does not require git clone, the devtools library allow to install netZooR directly from github and from either devel or master.\nPlease refer to the specific installation guide for each package for more details.\nQuick developer guide If you are a developer, you will need to clone to your own fork to be able to create pull requests to netZoo. Please refer to the contribution guide.\nMake sure to have the latest changes in your local repo through git fetch upstream then git merge upstream/master.\nTo update the devel branch git checkout devel and git fetch upstream and git merge upstream/devel.\nMake sure to update your repository before creating a pull request or creating an issue.\n "
},
{
	"uri": "https://netZoo.github.io/docs/docs/",
	"title": "List",
	"tags": [],
	"description": "",
	"content": "netZooR:\n Link to the dedicated documentation website.\nnetZooPy:\n Link to the dedicated documentation website.\nnetZooM:\n Link to the dedicated documentation website.\nnetZooC:\n Link to the dedicated documentation website.\n"
},
{
	"uri": "https://netZoo.github.io/papers/papers/",
	"title": "List",
	"tags": [],
	"description": "",
	"content": "Publications PANDA LIONESS CONDOR ALPACA MONSTER "
},
{
	"uri": "https://netZoo.github.io/zooanimals/animals/",
	"title": "List",
	"tags": [],
	"description": "",
	"content": "Network biology PANDA:\n paper (netZooR, netZooPy, netZooM, netZooC)\nLIONESS:\n paper (netZooR, netZooPy, netZooM)\nCONDOR:\n paper (netZooR, netZooPy)\nMONSTER:\n paper (netZooR)\nALPACA:\n paper (netZooR)\nPUMA:\n paper (netZooPy, netZooM, netZooC)\nSAMBAR:\n paper (netZooR, netZooPy)\nSPIDER:\n In preparation. (netZooM)\nOTTER:\n paper (netZooR, netZooPy, netZooM)\nCRANE:\n paper (netZooR)\nSequence analysis YARN:\n paper - repo\nFENRIR:\n In preparation - repo\n"
},
{
	"uri": "https://netZoo.github.io/zooanimals/panda/",
	"title": "PANDA",
	"tags": [],
	"description": "",
	"content": "   Reference Passing Messages between Biological Networks to Refine Predicted Interactions. link.\nAbstract Regulatory network reconstruction is a fundamental problem in computational biology. There are significant limitations to such reconstruction using individual datasets, and increasingly people attempt to construct networks using multiple, independent datasets obtained from complementary sources, but methods for this integration are lacking. We developed PANDA (Passing Attributes between Networks for Data Assimilation), a message-passing model using multiple sources of information to predict regulatory relationships, and used it to integrate protein-protein interaction, gene expression, and sequence motif data to reconstruct genome-wide, condition-specific regulatory networks in yeast as a model. The resulting networks were not only more accurate than those produced using individual data sets and other existing methods, but they also captured information regarding specific biological mechanisms and pathways that were missed using other methodologies. PANDA is scalable to higher eukaryotes, applicable to specific tissue or cell type data and conceptually generalizable to include a variety of regulatory, interaction, expression, and other genome-scale data. An implementation of the PANDA algorithm is available at www.sourceforge.net/projects/panda-net.\nImplementation netZooR, netZooPy, netZooM, netZooC\n"
},
{
	"uri": "https://netZoo.github.io/",
	"title": "The network zoo",
	"tags": [],
	"description": "",
	"content": "The network zoo netZoo{R,Py,M,C} is a network biology package for the reconstruction and analysis of gene regulatory networks.\nIf you use the netZoo, please cite us using the following format.\n We used ALPACA (Padi and Quackenbush 2018) as implemented in netZooR (v 0.7.2; netzoo.github.io) using R (v 4.0.2).\n See the following example for reference.\nA collection of networks generated using the netZoo is available in GRAND database.\nPackages R:  netZooR  Python:  netZooPy  MATLAB:  netZooM  C:  netZooC  Following the update of python-igraph package from 0.7.1.post6 to newer versions, the assignemnt of communities in condor as implemented in netZooPy has changed. netZooPy \u0026gt;= 0.7.2 imports newer versions of python-igraph \u0026gt; 0.7.1.post6, therefore the results of condor in netZooPy \u0026lt; 0.7.2 and netZooPy \u0026gt;= 0.7.2 could be different.\n Starting from netZooM 0.4.1, netZooPy 0.5.1, and netZooR 0.6.1 (which includes pandaR 1.19.4), the default data processing step in PANDA has changed. Data processing was modified in all platforms to give the same output as PANDA in netZooC, which adds rows of zeros if a gene/TF is missing in at least one prior (expression, motif, ppi). The previous behavior can be accessed through the \u0026lsquo;legacy\u0026rsquo; option in the variable mode. The option \u0026lsquo;intersection\u0026rsquo; of the variable mode removes missing TFs/genes if they are absent from at least one prior.\n Live status Continuous integration is enabled for netZoo using Travis and ZooKeeper.\nR - build status (Ubuntu) - coverage\nPython - build status (Ubuntu, Macos) - coverage\nMATLAB - build status (Ubuntu, Macos) - coverage\nC - build status (Ubuntu, Macos) - coverage\nnetZoo{R,Py,M,C} is a community maintained package licensed under GPL-3.0.\n "
},
{
	"uri": "https://netZoo.github.io/contribute/issues/",
	"title": "Getting help",
	"tags": [],
	"description": "",
	"content": "Issues If you would like to report a bug in the netZoo, please open an issue in the issues tab of the corresponding netZoo{R,Py,M,C} github.\nTutorials Check the tutorials in the github repo for a basic application of the network tools.\nnetZooPy: Jupyter Notebook Tutorials.\nnetZooM: LiveScript Tutorials.\nnetZooR: R markdown Tutorials.\nContact Drop us an email if you have any other inquiry.\n"
},
{
	"uri": "https://netZoo.github.io/zooanimals/lioness/",
	"title": "LIONESS",
	"tags": [],
	"description": "",
	"content": "   Reference Estimating Sample-Specific Regulatory Networks. link.\nAbstract Biological systems are driven by intricate interactions among molecules. Many methods have been developed that draw on large numbers of expression samples to infer connections between genes (or their products). The result is an aggregate network representing a single estimate for the likelihood of each interaction, or “edge,” in the network. Although informative, aggregate models fail to capture population heterogeneity. Here we propose a method to reverse engineer sample-specific networks from aggregate networks. We demonstrate our approach in several contexts, including simulated, yeast microarray, and human lymphoblastoid cell line RNA sequencing data. We use these sample-specific networks to study changes in network topology across time and to characterize shifts in gene regulation that were not apparent in the expression data. We believe that generating sample-specific networks will greatly facilitate the application of network methods to large, complex, and heterogeneous multi-omic datasets, supporting the emerging field of precision network medicine.\nImplementation netZooR, netZooPy, netZooM\n"
},
{
	"uri": "https://netZoo.github.io/zooanimals/condor/",
	"title": "CONDOR",
	"tags": [],
	"description": "",
	"content": "   Reference Bipartite Community Structure of eQTLs. link.\nAbstract Genome Wide Association Studies (GWAS) and expression quantitative trait locus (eQTL) analyses have identified genetic associations with a wide range of human phenotypes. However, many of these variants have weak effects and understanding their combined effect remains a challenge. One hypothesis is that multiple SNPs interact in complex networks to influence functional processes that ultimately lead to complex phenotypes, including disease states. Here we present CONDOR, a method that represents both cis- and trans-acting SNPs and the genes with which they are associated as a bipartite graph and then uses the modular structure of that graph to place SNPs into a functional context. In applying CONDOR to eQTLs in chronic obstructive pulmonary disease (COPD), we found the global network \u0026ldquo;hub\u0026rdquo; SNPs were devoid of disease associations through GWAS. However, the network was organized into 52 communities of SNPs and genes, many of which were enriched for genes in specific functional classes. We identified local hubs within each community (\u0026ldquo;core SNPs\u0026rdquo;) and these were enriched for GWAS SNPs for COPD and many other diseases. These results speak to our intuition: rather than single SNPs influencing single genes, we see groups of SNPs associated with the expression of families of functionally related genes and that disease SNPs are associated with the perturbation of those functions. These methods are not limited in their application to COPD and can be used in the analysis of a wide variety of disease processes and other phenotypic traits.\nImplementation netZooR, netZooPy\n"
},
{
	"uri": "https://netZoo.github.io/zooanimals/monster/",
	"title": "MONSTER",
	"tags": [],
	"description": "",
	"content": "   Reference Estimating drivers of cell state transitions using gene regulatory network models. link.\nAbstract Background: Specific cellular states are often associated with distinct gene expression patterns. These states are plastic, changing during development, or in the transition from health to disease. One relatively simple extension of this concept is to recognize that we can classify different cell-types by their active gene regulatory networks and that, consequently, transitions between cellular states can be modeled by changes in these underlying regulatory networks.\nResults: Here we describe MONSTER, MOdeling Network State Transitions from Expression and Regulatory data, a regression-based method for inferring transcription factor drivers of cell state conditions at the gene regulatory network level. As a demonstration, we apply MONSTER to four different studies of chronic obstructive pulmonary disease to identify transcription factors that alter the network structure as the cell state progresses toward the disease-state.\nConclusions: We demonstrate that MONSTER can find strong regulatory signals that persist across studies and tissues of the same disease and that are not detectable using conventional analysis methods based on differential expression. An R package implementing MONSTER is available at github.com/QuackenbushLab/MONSTER.\nKeywords: Chronic obstructive pulmonary disease; Gene regulatory network inference; Genomics.\nImplementation netZooR\n"
},
{
	"uri": "https://netZoo.github.io/zooanimals/alpaca/",
	"title": "ALPACA",
	"tags": [],
	"description": "",
	"content": "   Reference Detecting phenotype-driven transitions in regulatory network structure. link.\nAbstract Complex traits and diseases like human height or cancer are often not caused by a single mutation or genetic variant, but instead arise from functional changes in the underlying molecular network. Biological networks are known to be highly modular and contain dense “communities” of genes that carry out cellular processes, but these structures change between tissues, during development, and in disease. While many methods exist for inferring networks and analyzing their topologies separately, there is a lack of robust methods for quantifying differences in network structure. Here, we describe ALPACA (ALtered Partitions Across Community Architectures), a method for comparing two genome-scale networks derived from different phenotypic states to identify condition-specific modules. In simulations, ALPACA leads to more nuanced, sensitive, and robust module discovery than currently available network comparison methods. As an application, we use ALPACA to compare transcriptional networks in three contexts: angiogenic and non-angiogenic subtypes of ovarian cancer, human fibroblasts expressing transforming viral oncogenes, and sexual dimorphism in human breast tissue. In each case, ALPACA identifies modules enriched for processes relevant to the phenotype. For example, modules specific to angiogenic ovarian tumors are enriched for genes associated with blood vessel development, and modules found in female breast tissue are enriched for genes involved in estrogen receptor and ERK signaling. The functional relevance of these new modules suggests that not only can ALPACA identify structural changes in complex networks, but also that these changes may be relevant for characterizing biological phenotypes.\nImplementation netZooR\n"
},
{
	"uri": "https://netZoo.github.io/zooanimals/puma/",
	"title": "PUMA",
	"tags": [],
	"description": "",
	"content": "   Reference PUMA: PANDA Using MicroRNA Associations. link.\nAbstract Conventional methods to analyze genomic data do not make use of the interplay between multiple factors, such as between microRNAs (miRNAs) and the mRNA transcripts they regulate, and thereby often fail to identify the cellular processes that are unique to specific tissues. We developed PUMA (PANDA Using MicroRNA Associations), a computational tool that uses message passing to integrate a prior network of miRNA target predictions with target gene co-expression information to model genome-wide gene regulation by miRNAs. We applied PUMA to 38 tissues from the Genotype-Tissue Expression (GTEx) project, integrating RNA-Seq data with two different miRNA target predictions priors, built on predictions from TargetScan and miRanda, respectively. We found that while target predictions obtained from these two different resources are considerably different, PUMA captures similar tissue-specific miRNA-target regulatory interactions in the different network models. Furthermore, the tissue-specific functions of miRNAs we identified based on regulatory profiles (available at: https://kuijjer.shinyapps.io/puma_gtex/) are highly similar between networks modeled on the two target prediction resources. This indicates that PUMA consistently captures important tissue-specific miRNA regulatory processes. In addition, using PUMA we identified miRNAs regulating important tissue-specific processes that, when mutated, may result in disease development in the same tissue. PUMA is available in C ++, MATLAB, and Python on GitHub (https://github.com/kuijjerlab and https://netzoo.github.io/).\nImplementation netZooPy, netZooM, netZooC\n"
},
{
	"uri": "https://netZoo.github.io/zooanimals/sambar/",
	"title": "SAMBAR",
	"tags": [],
	"description": "",
	"content": "   Reference Cancer subtype identification using somatic mutation data. link.\nAbstract Conventional methods to analyze genomic data do not make use of the interplay between multiple factors, such as between microRNAs (miRNAs) and the mRNA transcripts they regulate, and thereby often fail to identify the cellular processes that are unique to specific tissues. We developed PUMA (PANDA Using MicroRNA Associations), a computational tool that uses message passing to integrate a prior network of miRNA target predictions with target gene co-expression information to model genome-wide gene regulation by miRNAs. We applied PUMA to 38 tissues from the Genotype-Tissue Expression (GTEx) project, integrating RNA-Seq data with two different miRNA target predictions priors, built on predictions from TargetScan and miRanda, respectively. We found that while target predictions obtained from these two different resources are considerably different, PUMA captures similar tissue-specific miRNA-target regulatory interactions in the different network models. Furthermore, the tissue-specific functions of miRNAs we identified based on regulatory profiles (available at: https://kuijjer.shinyapps.io/puma_gtex/) are highly similar between networks modeled on the two target prediction resources. This indicates that PUMA consistently captures important tissue-specific miRNA regulatory processes. In addition, using PUMA we identified miRNAs regulating important tissue-specific processes that, when mutated, may result in disease development in the same tissue. PUMA is available in C ++, MATLAB, and Python on GitHub (https://github.com/kuijjerlab and https://netzoo.github.io/).\nImplementation netZooR, netZooPy\n"
},
{
	"uri": "https://netZoo.github.io/zooanimals/otter/",
	"title": "OTTER",
	"tags": [],
	"description": "",
	"content": "   Reference Gene Regulatory Network Inference as Relaxed Graph Matching. link.\nAbstract Gene regulatory network inference is instrumental to the discovery of genetic mechanisms driving diverse diseases, including cancer. Here, we present a theoretical framework for PANDA, an established method for gene regulatory network inference. PANDA is based on iterative message passing updates that resemble the gradient descent of an optimization problem, OTTER, which can be interpreted as relaxed inexact graph matching between a gene-gene co-expression and a protein-protein interaction matrix. The solutions of OTTER can be derived explicitly and inspire an alternative spectral algorithm, for which we can provide network recovery guarantees. We compare different solution approaches of OTTER to other inference methods using three biological data sets, which we make publicly available to offer a new application venue for relaxed graph matching in gene regulatory network inference. We find that using modern gradient descent methods with superior convergence properties solving OTTER outperforms state-of-the-art gene regulatory network inference methods in predicting binding of transcription factors to regulatory regions.\nImplementation netZooR, netZooPy, netZooM\n"
},
{
	"uri": "https://netZoo.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://netZoo.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]